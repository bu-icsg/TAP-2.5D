class Node:
	def __init__(self, value = None, left = None, right = None):
		self.left = left
		self.right = right
		self.ind = value
		self.x = None
		self.y = None
		self.width = None
		self.height = None

	def set_node_value(self, value, x = None, y = None, width = None, height = None):
		self.ind = value
		self.x = x
		self.y = y
		self.width = width
		self.height = height

def printTree(tree):
	if tree != None:
		printTree(tree.left)
		print (tree.ind)
		printTree(tree.right)

class Bstree:
	def __init__(self, root = None):
		self.root = root

	def insertLeft(self, newnode):
		self.left = Node(newnode)

	def insertRight(self, newnode):
		self.right = Node(newnode)

	# def bstree2flp():

	def addnode(self, node, ind, x, y, width, height):
		if node == None:
			return False
		if self.root.ind == None:
			self.root.set_node_value(ind, x, y, width, height)
			print ('Node ', ind, 'add to the root')
			return True
		elif x == node.x + node.width and y <= node.y + node.height:
			if node.left == None:
				node.left = Node()
				node.left.set_node_value(ind, x, y, width, height)
				print ('Node ', ind, 'add to the left of ', node.ind)
				return True
			else:
				return self.addnode(node.left, ind, x, y, width, height)
		elif x == node.x:
			if node.right == None:
				node.right = Node()
				node.right.set_node_value(ind, x, y, width, height)
				print ('Node ', ind, 'add to the right of ', node.ind)
				return True
			else:
				return self.addnode(node.right, ind, x, y, width, height)		
		else:
			print (x, 'is not equal to either', node.x, 'or', node.x+node.width)
			try_right = self.addnode(node.right, ind, x, y, width, height)
			if not try_right:
				return self.addnode(node.left, ind, x, y, width, height)
			else:
				return True

	def flp2bstree(self, ox, oy, owidth, oheight):
		# x, y, width, height describes an admissible floorplan generated by a tight placement (or a naive side-by-side placement)
		# x, y are bottom-left coordinates of chiplet
		x, y, width, height = ox[:], oy[:], owidth[:], oheight[:]
		chiplet_count = len(x)
		ind = [i for i in range(chiplet_count)]
		x, y, width, height, ind = list(map(list, zip(*sorted(zip(x,y,width,height, ind), key=lambda pair: pair[0:2]))))
		print (ind, x, y, width, height)
		self.root = Node()
		# self.root.set_node_value(ind[0], x[0], y[0], width[0], height[0])
		print (self.root)
		for i in range(chiplet_count):
			self.addnode(self.root, ind[i], x[i], y[i], width[i], height[i])
		print ('print tree inorder')
		printTree(self.root)


if __name__ == "__main__":
	# example 1
	# x = [0, 2, 2, 0]
	# y = [0, 0, 1, 3]
	# width = [2, 1, 2, 3]
	# height = [2, 1, 2, 1]

	# example 2
	x = [0, 3, 0, 3, 5, 2, 0, 3]
	y = [0, 0, 2, 1.5, 1.5, 3, 5, 4]
	width = [3, 4, 2, 2, 1, 4, 3, 4]
	height = [2, 1.5, 3, 1.5, 1, 1, 2, 2]

	root = Bstree()
	root.flp2bstree(x, y, width, height)